#! /usr/bin/env bash

function _e() {
  local arg=$1
  local item_path=$LOCAL_NOTE_STORE/$arg
  local item_dir=$LOCAL_NOTE_STORE/`echo $arg | rev | cut -d '/' -f 2- | rev`

  mkdir -p $item_dir

  if [[ `which mark` ]]; then
    mark $item_path &
    open $item_dir &
  fi

  ${EDITOR:-vim} $item_path
}

function _ls() {
  local arg=$1

  tree -C $LOCAL_NOTE_STORE/$arg
}

function _rm() {
  local item=$1
  echo "deleting $item"
  local full_path_to_item=$LOCAL_NOTE_STORE/$item

  if [ -d $full_path_to_item ]; then
    rm -rf $full_path_to_item
    aws s3 rm s3://$NOTES_S3_BUCKET/$item --recursive --profile $NOTES_AWS_PROFILE
  else
    if [ -e $full_path_to_item ]; then
      rm $full_path_to_item
      aws s3 rm s3://$NOTES_S3_BUCKET/$item --profile $NOTES_AWS_PROFILE
    else
      echo "'$item' not found."
      exit 1
    fi
  fi
}

function _pull() {
    echo "pulling remote note store"
    aws s3 sync s3://$NOTES_S3_BUCKET $LOCAL_NOTE_STORE --profile $NOTES_AWS_PROFILE
}

function _push() {
    echo "pushing local note store to remote"
    aws s3 sync $LOCAL_NOTE_STORE s3://$NOTES_S3_BUCKET --profile $NOTES_AWS_PROFILE
}

function _render() {
  local item=$LOCAL_NOTE_STORE/$1
  local item_html=$item.html

  ruby -r 'github/markup' -r 'erb' -e 'md = GitHub::Markup.render_s(GitHub::Markups::MARKUP_MARKDOWN, File.read((ARGV.first))); puts ERB.new(File.read("render_md_template.html.erb")).result(binding)' $item > $item_html

  echo "rendered $item_html"
}

function _publish() {
  local item=$1
  echo "publishing $item"

  if [ -d $LOCAL_NOTE_STORE/$item ]; then
    aws s3 cp $LOCAL_NOTE_STORE/$item s3://$NOTES_S3_BUCKET/$item --recursive --acl public-read --profile $NOTES_AWS_PROFILE
  else
    aws s3 cp $LOCAL_NOTE_STORE/$item s3://$NOTES_S3_BUCKET/$item --acl public-read --profile $NOTES_AWS_PROFILE
  fi
}

command=$1
arg=$2

case $command in
  pull) _pull;;
  push) _push;;
  render) _render $arg;;
  publish) _publish $arg;;
  rm) _rm $arg;;
  ls) _ls $arg;;
  e) _e $arg;;
esac

